{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGif","imagenes","objeto","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"iNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,IAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAkB5C,OAEI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,0FAG4EC,UAAUH,GAHtF,sBAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAgBZM,GAhBY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,sBAAKc,UAAU,2DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFZ,SAACA,GAAc,IAAD,EAEXd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAwBrC,OAjBAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAGFC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAGZ,CAACpB,IAGGqB,EDN2BM,CAAY3B,GAAjC4B,EAhBsB,EAgB5BrB,KAAgBa,EAhBY,EAgBZA,QAEvB,OACI,qCACI,6BAAKpB,IAIJoB,GAAW,4CAEZ,qBAAKJ,UAAU,YAAf,SAQKY,EAASnB,KAAI,SAAAoB,GAAM,OAChB,cAAC,EAAD,eAEQA,GADCA,EAAOlB,aErCvBmB,EAAe,WAAM,MAGM5C,mBAAS,CAAC,cAHhB,mBAGvB6C,EAHuB,KAGX9C,EAHW,KAgB9B,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAKK8C,EAAWtB,KAAI,SAAAuB,GAAG,OACf,cAAC,EAAD,CAEIhC,SAAUgC,GADLA,YC5B7BC,IAASC,OACL,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.c3fae96f.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n// export const AddCategory = (props) => {\r\n\r\n    const [inputValue, setInputValue] = useState(''); // '' evita cambio de tipo\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue(''); // limpiamos el renglon\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","export const getGifs = async (category) => {\r\n\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=dcDbhMUzsXllraziKyZbyzeCvgOng8lw&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url // pregunto con ? si viene\r\n\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useFetchGif} from \"../hooks/useFetchGifs\";\r\nimport {GifGridItem} from \"./GifGridItem\";\r\n// import {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [count, setCount] = useState(0);\r\n\r\n    // const [images, setImages] = useState([]);\r\n    //\r\n    // useEffect(() => {\r\n    //\r\n    //     //Por Ãºnica vez ya que esta dentro de useEffect\r\n    //     getGifs(category)\r\n    //         .then(imgs => setImages(imgs));\r\n    //\r\n    // }, [category]); // aca van las dependencias para que se ejecute el useEffect\r\n    // // EN este caso useEffect se ejecuta cada vez que cambia la categoria\r\n\r\n\r\n    const {data: imagenes, loading} = useFetchGif(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {/*{loading ? <p>'Cargando...'</p> : 'Data cargada'}*/}\r\n\r\n            {loading && <p>Cargando...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {/*<h3>{count}</h3>*/}\r\n                {/*<button onClick={() => setCount(count + 1)}></button>*/}\r\n\r\n                {/*<ol>*/}\r\n                {/*    {images.map(objeto => <li key={objeto.id}>{objeto.title}</li>)}*/}\r\n                {/*</ol>*/}\r\n\r\n                {imagenes.map(objeto =>\r\n                    <GifGridItem\r\n                        key={objeto.id}\r\n                        {...objeto}\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGif = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                /* El settimeout es una prueba solo para ver como funciona el \"cargando\"*/\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                }, 3000);\r\n            });\r\n\r\n    }, [category]);\r\n\r\n\r\n    return state;\r\n\r\n}\r\n","import React, {useState} from 'react';\r\nimport {AddCategory} from \"./components/AddCategory\";\r\nimport {GifGrid} from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const [categories, setCategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball']);\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // Al menos 2 formas\r\n    //     // 1)\r\n    //     setCategories([...categories, 'Nuevo item']);\r\n    //\r\n    //     // 2). Tipo callback: cats es el valor del estado anterior\r\n    //     // setCategories(cats => [...cats, 'Nuevo Item']);\r\n    //\r\n    //\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {/*{categories.map((cat) => {*/}\r\n                {/*    return <li key={cat}>{cat}</li>*/}\r\n                {/*})}*/}\r\n\r\n                {categories.map(cat => (\r\n                    <GifGrid\r\n                        key={cat}\r\n                        category={cat}\r\n                    />\r\n                ))}\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from \"./GifExpertApp\";\n\n\nReactDOM.render(\n    <GifExpertApp/>,\n\n    document.getElementById('root')\n);\n"],"sourceRoot":""}